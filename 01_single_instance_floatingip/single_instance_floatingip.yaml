heat_template_version: 2013-05-23

description: A HOT template that creates a VM instance and assigns it a floating ip 

parameters:
  image:
    type: string
    description: >
      Name or ID of the image to use for the instance.
    constraints:
      - custom_constraint: glance.image
        description: Must identify an image known to Glance
  flavor:
    type: string
    description: Flavor for the instance to be created
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
        description: Must be a flavor known to Nova
  key_name:
    type: string
    description: Name of an existing key pair to use for the instance
    constraints:
      - custom_constraint: nova.keypair
        description: Must name a public key (pair) known to Nova
  private_network:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    default: tenant-net
  public_network:
    type: string
    label: Public network name or ID
    description: Public network with floating IP addresses.
    default: public-net

resources:
  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: server_security_group
      rules:
        - protocol: icmp
        - protocol: tcp
          port_range_min: 22
          port_range_max: 22

  my_instance_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_network }
      security_groups:
       - { get_resource: server_security_group }

  my_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - network: { get_param: private_network }
      networks:
        - port: { get_resource: my_instance_port }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_resource: my_instance_port }

outputs:
  server_ip:
    value: { get_attr: [floating_ip, floating_ip_address] }
    description: Instance IP
